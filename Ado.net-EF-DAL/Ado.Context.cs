//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ado.net_EF_DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Batch> Batches { get; set; }
        public virtual DbSet<Cours> Courses { get; set; }
        public virtual DbSet<Faculty> Faculties { get; set; }
        public virtual DbSet<Model> Models { get; set; }
        public virtual DbSet<Participant> Participants { get; set; }
    
        [DbFunction("Entities", "FetchFaculty")]
        public virtual IQueryable<FetchFaculty_Result> FetchFaculty(Nullable<int> pSNo, string emailId, string name)
        {
            var pSNoParameter = pSNo.HasValue ?
                new ObjectParameter("PSNo", pSNo) :
                new ObjectParameter("PSNo", typeof(int));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FetchFaculty_Result>("[Entities].[FetchFaculty](@PSNo, @EmailId, @Name)", pSNoParameter, emailIdParameter, nameParameter);
        }
    
        [DbFunction("Entities", "GetFac")]
        public virtual IQueryable<GetFac_Result> GetFac()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetFac_Result>("[Entities].[GetFac]()");
        }
    
        public virtual int uspInsertBatch(string batchName, Nullable<System.DateTime> batch, Nullable<int> noOfStudent, string sessionQuarter)
        {
            var batchNameParameter = batchName != null ?
                new ObjectParameter("BatchName", batchName) :
                new ObjectParameter("BatchName", typeof(string));
    
            var batchParameter = batch.HasValue ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(System.DateTime));
    
            var noOfStudentParameter = noOfStudent.HasValue ?
                new ObjectParameter("NoOfStudent", noOfStudent) :
                new ObjectParameter("NoOfStudent", typeof(int));
    
            var sessionQuarterParameter = sessionQuarter != null ?
                new ObjectParameter("SessionQuarter", sessionQuarter) :
                new ObjectParameter("SessionQuarter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertBatch", batchNameParameter, batchParameter, noOfStudentParameter, sessionQuarterParameter);
        }
    
        public virtual int uspInsertCourses(Nullable<int> courseID, string courseTitle, Nullable<decimal> duration, Nullable<int> courseOwner, string assessmentMode)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var courseTitleParameter = courseTitle != null ?
                new ObjectParameter("CourseTitle", courseTitle) :
                new ObjectParameter("CourseTitle", typeof(string));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(decimal));
    
            var courseOwnerParameter = courseOwner.HasValue ?
                new ObjectParameter("CourseOwner", courseOwner) :
                new ObjectParameter("CourseOwner", typeof(int));
    
            var assessmentModeParameter = assessmentMode != null ?
                new ObjectParameter("AssessmentMode", assessmentMode) :
                new ObjectParameter("AssessmentMode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertCourses", courseIDParameter, courseTitleParameter, durationParameter, courseOwnerParameter, assessmentModeParameter);
        }
    
        public virtual int uspInsertFaculty(Nullable<int> pSNo, string emailId, string name)
        {
            var pSNoParameter = pSNo.HasValue ?
                new ObjectParameter("PSNo", pSNo) :
                new ObjectParameter("PSNo", typeof(int));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertFaculty", pSNoParameter, emailIdParameter, nameParameter);
        }
    
        public virtual int uspInsertGrader(Nullable<int> facultyId, Nullable<int> participantId)
        {
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("FacultyId", facultyId) :
                new ObjectParameter("FacultyId", typeof(int));
    
            var participantIdParameter = participantId.HasValue ?
                new ObjectParameter("ParticipantId", participantId) :
                new ObjectParameter("ParticipantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertGrader", facultyIdParameter, participantIdParameter);
        }
    
        public virtual int uspInsertModel(string modelName)
        {
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertModel", modelNameParameter);
        }
    
        public virtual int uspInsertParticipant(Nullable<int> participantId, string participantName, string participantEmail)
        {
            var participantIdParameter = participantId.HasValue ?
                new ObjectParameter("ParticipantId", participantId) :
                new ObjectParameter("ParticipantId", typeof(int));
    
            var participantNameParameter = participantName != null ?
                new ObjectParameter("ParticipantName", participantName) :
                new ObjectParameter("ParticipantName", typeof(string));
    
            var participantEmailParameter = participantEmail != null ?
                new ObjectParameter("ParticipantEmail", participantEmail) :
                new ObjectParameter("ParticipantEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertParticipant", participantIdParameter, participantNameParameter, participantEmailParameter);
        }
    }
}
